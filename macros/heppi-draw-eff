#!/usr/local/bin/python

"""
This is a test script to run few Heppi options
"""
#import heppi
from heppi import heppi
heppi.ROOT.gROOT.ProcessLine(".x .root/rootlogon.C")
heppi.ROOT.gROOT.SetBatch( heppi.ROOT.kTRUE  )
print "-----------------------"
print dir(heppi)
print "-----------------------"


def customize_roc(roc):
    roc.GetYaxis().SetTitleSize(25)
    roc.GetXaxis().SetTitleSize(25)
    roc.GetYaxis().SetTitleOffset (1)
    roc.GetXaxis().SetTitleOffset (1)


# stack = heppi.instack(
#     plotcard  = "./plotcards/vbf_plotcard_data_test.json",
#     sampledir = './data'
# )
stack = heppi.instack(
    plotcard  = './plotcards/vbf_plotcard_80x_ZplusJet.json',
    sampledir = '../data_80x'
)

heppi.ROOT.gROOT.ProcessLine(".x .root/rootlogon.C")

stack.read_plotcard()
stack.book_trees(True)
stack.print_cuts()


cats_eta = [
    '(abs(jetEta)<2.5)',
    '(abs(jetEta)>=2.5 && abs(jetEta)<2.75)',
    '(abs(jetEta)>=2.75 && abs(jetEta)<3.0)',
    '(abs(jetEta)>=3.0)'
    ]
cats_pt = [
    '(jetPt>20 && jetPt<=30 )',
    '(jetPt>30 && jetPt<=50 )',
    '(jetPt>50 && jetPt<=100)',
    '(jetPt>100)'
]
mva_wp = {
    "super-tight" : [
        [ 0.26, -0.34, -0.24,  0.0 ],
        [ 0.62, -0.21, -0.07,  0.3  ],
        [ 0.87,  0.17,  0.25,  0.4 ],
        [-1.00, -1.00, -1.00, -1.00 ]
    ],
    "tight" : [
        [ 0.26, -0.34, -0.24, -0.26],
        [ 0.62, -0.21, -0.07, -0.03],
        [ 0.87,  0.17,  0.25, 0.33 ],
        [-1.00, -1.00, -1.00, -1.00]
    ],
    "medium": [
        [-0.49, -0.53, -0.44, -0.42],
        [-0.06, -0.42, -0.30, -0.23],
        [ 0.56, -0.10,  0.01,  0.13],
        [-1.00, -1.00, -1.00, -1.00]
    ],
    "loose" :[
        [-0.96, -0.64, -0.56, -0.54],
        [-0.92, -0.56, -0.44, -0.39],
        [-0.77, -0.31, -0.20, -0.03],
        [-1.00, -1.00, -1.00, -1.00]
    ],
    "RMScut" : [
        [1.00, 0.03, 0.03, 0.03],
        [1.00, 0.03, 0.03, 0.03],
        [1.00, 0.03, 0.03, 0.03],
        [1.00, 0.03, 0.03, 0.03]
    ]
}

for key,wp in mva_wp.items():
    print '-------------------------'
    print 'wp == ', key, ' ::' , wp
    for pt_bin in cats_pt :
        selection = []
        cuts = mva_wp[key][cats_pt.index(pt_bin)]
        print "pt bin [", cats_pt.index(pt_bin), "] : ",cuts
        _cuts_all_eta_ = []
        for eta_bin in cats_eta :
            cut = cuts[cats_eta.index(eta_bin)]
            print '\t', pt_bin, ':',eta_bin,':', cut
            if "RMS"  not in key:
                selection.append('('+ eta_bin + '&& (jet_puJetIdMVA>'+ str(cut) + ') )')
            else:
                selection.append('('+ eta_bin + '&& (jet_rms<'+ str(cut) + ') )')
        selection  =  '+'.join (selection)
        selection  =  '(%s) && (%s)' % (pt_bin, selection)
        print 'all cut  ::' , pt_bin
        print 'selectio ::' , selection
        varkey   =  'jetEta'
        # gr_mc   = stack.make_eff(varkey=variable,selection=selection,allsel=pt_bin, sample='background', label='background'+key+str(cats_eta.index(eta_bin)))
        # gr_data = stack.make_eff(varkey=variable,selection=selection,allsel=pt_bin, sample='data'      , label='data'+key+str(cats_eta.index(eta_bin)))

        print stack.variables[varkey].hist

        label = '_'+ key + '_category_' + str(cats_pt.index(pt_bin))
        h_sel_mc   =  stack.histogram(variable = stack.variables[varkey], type='background', cut=selection, label="mc_sel" + label)
        h_tot_mc   =  stack.histogram(variable = stack.variables[varkey], type='background', cut=pt_bin   , label="mc_tot" + label)

        h_sel_data =  stack.histogram(variable = stack.variables[varkey], type='data', cut=selection, label="data_sel" + label)
        h_tot_data =  stack.histogram(variable = stack.variables[varkey], type='data', cut=pt_bin   , label="data_tot" + label)

        gr_mc   = heppi.ROOT.TGraphAsymmErrors(h_sel_mc  ,h_tot_mc)
        gr_data = heppi.ROOT.TGraphAsymmErrors(h_sel_data,h_tot_data)

        gr_data.GetYaxis().SetTitleSize(25)
        gr_data.GetXaxis().SetTitleSize(25)
        gr_data.GetYaxis().SetTitleOffset (1)
        gr_data.GetXaxis().SetTitleOffset (1)
        gr_data.SetLineColor  (129)
        gr_data.SetMarkerColor(129)
        gr_data.SetMarkerStyle(20)
        gr_data.SetMarkerSize (0.8)
        gr_data.SetLineWidth(2)

        gr_data.GetYaxis().SetRangeUser(0,1.3)


        gr_mc.GetYaxis().SetTitleSize(25)
        gr_mc.GetXaxis().SetTitleSize(25)
        gr_mc.GetYaxis().SetTitleOffset (1)
        gr_mc.GetXaxis().SetTitleOffset (1)
        gr_mc.SetLineColor(132)
        gr_mc.SetMarkerColor(132)
        gr_mc.SetMarkerStyle(20)
        gr_mc.SetMarkerSize (0.8)
        gr_mc.SetLineWidth(2)
        gr_mc.GetYaxis().SetRangeUser(0,1.3)
        label = '_'+ key + '_category_' + str(cats_pt.index(pt_bin))
        c =  heppi.ROOT.TCanvas("c"+label,"c",700,500)
        c.cd()
        heppi.ROOT.gPad.SetGridx()
        heppi.ROOT.gPad.SetGridy()
        # legend  = heppi.ROOT.TLegend(0.5, 0.2,0.9,0.4)
        legend  = heppi.ROOT.TLegend(0.65, 0.78,0.85,0.88)
        legend.SetTextAlign( 12 )
        legend.SetTextFont ( 43 )
        legend.SetTextSize ( 18 )
        legend.SetLineColor( 0 )
        legend.SetFillColor( 0 )
        legend.SetFillStyle( 0 )
        legend.SetLineColorAlpha(0,0)
        legend.SetShadowColor(0)

        legend.AddEntry( gr_mc   , "MC"  , "lep" )
        legend.AddEntry( gr_data , "Data", "lep" )

        line = heppi.ROOT.TLine()
        line.SetLineStyle(7)
        line.SetLineWidth(2)


        gr = heppi.ROOT.TMultiGraph()
        gr.SetTitle(";#eta; #varepsilon_{pujid-MVA}")
        gr.Add(gr_mc)
        gr.Add(gr_data)
        # print "::", dir(gr.GetXaxis())
        gr.Draw("AL")
        gr.SetMinimum(0.0)
        gr.SetMaximum(1.3)
        # customize_roc(gr)
        gr.Draw("APZ")
        c.Update()
        legend.Draw()
        line.DrawLine(gr_data.GetXaxis().GetXmin(),1,gr_data.GetXaxis().GetXmax(),1)

        line.DrawLine( 2.50,0,  2.50,1)
        line.DrawLine( 2.75,0,  2.75,1)
        line.DrawLine( 3.00,0,  3.00,1)
        line.DrawLine(-2.50,0, -2.50,1)
        line.DrawLine(-2.75,0, -2.75,1)
        line.DrawLine(-3.00,0, -3.00,1)

        heppi.utils.draw_labels(["CMSSW-80x","",
                                 "wp-" + key + "  " + pt_bin
                                 ])

        c.SaveAs("plots/EFF_" + varkey + '_' + label + ".pdf")
        c.SaveAs("plots/EFF_" + varkey + '_' + label + ".png")
