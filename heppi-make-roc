#!/usr/local/bin/python

"""
This is a test script to run few Heppi options
"""
#import heppi
from heppi import heppi
heppi.ROOT.gROOT.ProcessLine(".x .root/rootlogon.C")
# heppi.ROOT.gROOT.SetBatch( heppi.ROOT.kTRUE  )

print "-----------------------"
print dir(heppi)
print "-----------------------"


def customize_roc(roc):
    roc.GetYaxis().SetTitleSize(25)
    roc.GetXaxis().SetTitleSize(25)
    roc.GetYaxis().SetTitleOffset (1)
    roc.GetXaxis().SetTitleOffset (1)


# stack = heppi.instack(
#     plotcard  = "./plotcards/vbf_plotcard_data_test.json",
#     sampledir = './data'
# )
stack = heppi.instack(
    plotcard  = './plotcards/vbf_plotcard_80x_ZplusJet.json',
    sampledir = '../data_80x'
)

heppi.ROOT.gROOT.ProcessLine(".x .root/rootlogon.C")

stack.read_plotcard()
stack.book_trees(True)
stack.print_cuts()
cats_eta = [
    ['(abs(jetEta)<2.5)','|#eta| < 2.5'],
    ['(abs(jetEta)>=2.5 && abs(jetEta)<2.75)','2.5 #leq |#eta| < 2.75'],
    ['(abs(jetEta)>=2.75 && abs(jetEta)<3.0)','2.75 #leq |#eta| < 3.0'],
    ['(abs(jetEta)>=3.0)','|#eta| #geq 3.0']
    ]
cats_pt = [
    ['(jetPt>20 && jetPt<=30 )','20 < p_{T} #leq 30 GeV'],
    ['(jetPt>30 && jetPt<=50 )','30 < p_{T} #leq 50 GeV'],
    ['(jetPt>50 && jetPt<=100)','50 < p_{T} #leq 100 GeV']#,
    # '(jetPt>100)'
]
mva_wp = {
    "super-tight" : [
        [ 0.26, -0.34, -0.24,  0.0 ],
        [ 0.62, -0.21, -0.07,  0.3  ],
        [ 0.87,  0.17,  0.25,  0.4 ]#,
        # [-1.00, -1.00, -1.00, -1.00 ]
    ],
    "tight" : [
        [ 0.26, -0.34, -0.24, -0.26],
        [ 0.62, -0.21, -0.07, -0.03],
        [ 0.87,  0.17,  0.25, 0.33 ]#,
        # [-1.00, -1.00, -1.00, -1.00]
    ]
    ,
    "medium": [
        [-0.49, -0.53, -0.44, -0.42],
        [-0.06, -0.42, -0.30, -0.23],
        [ 0.56, -0.10,  0.01,  0.13]#,
        # [-1.00, -1.00, -1.00, -1.00]
    ],
    "loose" :[
        [-0.96, -0.64, -0.56, -0.54],
        [-0.92, -0.56, -0.44, -0.39],
        [-0.77, -0.31, -0.20, -0.03]#,
        # [-1.00, -1.00, -1.00, -1.00]
    ],
    "RMScut" : [
        [1.00, 0.03, 0.03, 0.03],
        [1.00, 0.03, 0.03, 0.03],
        [1.00, 0.03, 0.03, 0.03]
    ]
}
cats = []
wp_cuts = {}
wp_rms  = {}
legend_cut  = []
for pt_bin in cats_pt :
    _cuts_     = mva_wp['tight' ][cats_pt.index(pt_bin)]
    _cuts_rms_ = mva_wp['RMScut'][cats_pt.index(pt_bin)]
    for eta_bin in cats_eta :
        _cut_ = _cuts_     [cats_eta.index(eta_bin)]
        _rms_ = _cuts_rms_ [cats_eta.index(eta_bin)]
        cats.append('('+ eta_bin[0] + '&&'+ pt_bin[0] + ')')
        wp_cuts ['('+ eta_bin[0] + '&&'+ pt_bin[0] + ')'] = _cut_
        wp_rms  ['('+ eta_bin[0] + '&&'+ pt_bin[0] + ')'] = _rms_
        legend_cut.append([eta_bin[1], pt_bin[1]])

print cats
for cat in cats :
    _sig_ = 'quark'
    _bkg_ = 'pileup'
    print 'cat ::', cat, ' -- '

    v1 = 'jet_puJetIdMVA'
    v2 = 'jet_RMS'

    # roc1 =  stack.make_roc('jet_puJetIdMVA' ,_sig_  ,_bkg_, selection=cat, wp=[], label='_%i'%cats.index(cat) )
    # roc2 =  stack.make_roc('jet_RMS'        ,_sig_  ,_bkg_, selection=cat, wp=[], label='_%i'%cats.index(cat) )

    points = []

    h1_sig =  stack.histogram(variable = stack.variables[v1], type='signal', cut=cat, label='_%i'%cats.index(cat))
    h1_bkg =  stack.histogram(variable = stack.variables[v1], type='pileup', cut=cat, label='_%i'%cats.index(cat))

    h2_sig =  stack.histogram(variable = stack.variables[v2], type='signal', cut=cat, label='_%i'%cats.index(cat))
    h2_bkg =  stack.histogram(variable = stack.variables[v2], type='pileup', cut=cat, label='_%i'%cats.index(cat))

    print "--> :: ",h1_bkg.Integral()
    print "--> :: ",h1_sig.Integral()
    print "--> :: ",h2_bkg.Integral()
    print "--> :: ",h2_sig.Integral()

    roc1 = heppi.ROOT.TGraph()
    roc2 = heppi.ROOT.TGraph()

    list1 = []
    roc1.SetPoint (0,1,1)
    for ibin in range(0, h1_sig.GetNbinsX()+1):
        beff = h1_bkg.Integral(ibin,h1_sig.GetNbinsX())/float(h1_bkg.Integral())
        seff = h1_sig.Integral(ibin,h1_sig.GetNbinsX())/float(h1_sig.Integral())
        roc1.SetPoint (ibin+1,beff,seff)
        list1.append([abs(h1_sig.GetBinCenter(ibin)-wp_cuts[cat]), [beff,seff]])
    roc1.SetPoint (h1_sig.GetNbinsX()+2,0,0)


    opp_1 = min(x for x in list1)
    p1 = heppi.ROOT.TEllipse(opp_1[1][0],opp_1[1][1],0.01,0.013)
    p1.SetFillColor(132)
    p1.SetLineWidth(0)
    p1.SetLineColor(132)
    points.append(p1)

    list2 = []
    roc2.SetPoint (0,1,1)
    for ibin in range(0, h2_sig.GetNbinsX()+1):
        beff = h2_bkg.Integral(ibin,h2_sig.GetNbinsX())/float(h2_bkg.Integral())
        seff = h2_sig.Integral(ibin,h2_sig.GetNbinsX())/float(h2_sig.Integral())
        roc2.SetPoint (ibin+1,beff,seff)
        list2.append([abs(h2_sig.GetBinCenter(ibin)-(0.1-wp_rms[cat])), [beff,seff]])
    roc2.SetPoint (h2_sig.GetNbinsX()+2,0,0)
    opp_2 = min(x for x in list2)
    p2 = heppi.ROOT.TEllipse(opp_2[1][0],opp_2[1][1],0.01,0.013)
    p2.SetFillColor( 122 )
    p2.SetLineWidth( 0 )
    p2.SetLineColor( 122 )
    points.append  ( p2 )

    c =  heppi.ROOT.TCanvas("c","c",700,700)
    c.cd()
    legend  = heppi.ROOT.TLegend(0.5, 0.2,0.9,0.4)
    legend.SetTextAlign( 12 )
    legend.SetTextFont ( 43 )
    legend.SetTextSize ( 18 )
    legend.SetLineColor( 0 )
    legend.SetFillColor( 0 )
    legend.SetFillStyle( 0 )
    legend.SetLineColorAlpha(0,0)
    legend.SetShadowColor(0)

    heppi.ROOT.gPad.SetGridx()
    heppi.ROOT.gPad.SetGridy()

    roc1.SetLineColor(132)
    roc2.SetLineColor(122)
    legend.AddEntry( roc1 , "PUJID MVA", "l" );
    legend.AddEntry( roc2 , "Jet   RMS", "l" );

    gr = heppi.ROOT.TMultiGraph()
    gr.SetTitle(";#varepsilon_{%s};#varepsilon_{%s}" % ('pileup','jet'))
    gr.Add(roc1)
    gr.Add(roc2)

    gr.Draw("AL")
    gr.GetYaxis().SetRangeUser(0,1.3)
    gr.GetXaxis().SetRangeUser(0,1)
    customize_roc(gr)
    gr.Draw("AL")
    c.Update()
    legend.Draw()
    heppi.utils.draw_labels( ["CMSSW-80x"] + legend_cut[cats.index(cat)] )
    line = heppi.ROOT.TLine()
    line.SetLineStyle(7)
    line.SetLineWidth(2)
    line.DrawLine(0,1,1,1)
    label = '_region_' + str(cats.index(cat))
    for p in points:
        p.Draw()
    c.SaveAs("plots/ROC_"+_sig_+'_'+_bkg_+label+".pdf")
    c.SaveAs("plots/ROC_"+_sig_+'_'+_bkg_+label+".png")
# roc = stack.make_roc('dipho_dijet_MVA','')
# raw_input()
#
# cuts = stack.variable_cutflow("nvtx")
# INFO:heppi:  -- variable ::      dijet_LeadJPt  (60,15,265)
# INFO:heppi:  -- variable ::       dijet_SubJPt  (60,15,265)
# INFO:heppi:  -- variable ::      dijet_leadEta    (50,-5,5)
# INFO:heppi:  -- variable ::   dijet_subleadEta    (50,-5,5)
# INFO:heppi:  -- variable ::          dijet_Mjj   (40,0,800)
# INFO:heppi:  -- variable ::          dijet_Zep    (50,0,10)
# INFO:heppi:  -- variable ::     dijet_abs_dEta    (20,0,10)
# INFO:heppi:  -- variable :: dijet_dipho_dphi_trunc     (30,0,3)
# INFO:heppi:  -- variable ::    dipho_lead_ptoM     (25,0,2)
# INFO:heppi:  -- variable :: dipho_sublead_ptoM     (25,0,2)
# INFO:heppi:  -- variable ::         dipho_PToM     (50,0,5)
# INFO:heppi:  -- variable ::    dipho_subleadPt   (50,0,200)
# INFO:heppi:  -- variable ::         dipho_mass (40,100,180)
# INFO:heppi:  -- variable ::               nvtx    (40,0,40)

# list_corr_varx =  ["dipho_mass"]
# list_corr_vary =  [
#     "dijet_Mjj",
#     "dipho_mass",
#     "dijet_abs_dEta",
#     "nvtx",
#     "dijet_Zep",
#     "dijet_dipho_dphi_trunc",
#     "dipho_PToM",
#     "dipho_lead_ptoM",
#     "dijet_LeadJPt",
#     "dijet_SubJPt",
#     "dipho_lead_ptoM",
#     "dipho_sublead_ptoM"
#     ]
#
# for varx in list_corr_varx :
#     for vary in list_corr_vary :
#         if vary != varx :
#             print varx, " .vs. ", vary
#             stack.scatter(varx,vary,'label',make_profiles = True)
#             stack.scatter(varx,vary,'label',make_profiles = False)
# print "signal events    := ", stack.get_signal_tree().GetEntries()
# print "background event := ", stack.get_background_tree().GetEntries()
#
# hist  = heppi.ROOT.TH2F("hist" ,";p^{lead}_{T}(GeV);p^{sub}_{T}(GeV);significance",7,15,50,7,15,50)
# h_01 = heppi.ROOT.TH2F("h_01",";p^{lead}_{T}(GeV);p^{sub}_{T}(GeV);fake rate"   ,7,15,50,7,15,50)
# h_02 = heppi.ROOT.TH2F("h_02",";p^{lead}_{T}(GeV);p^{sub}_{T}(GeV);fake rate"   ,7,15,50,7,15,50)
# h_12 = heppi.ROOT.TH2F("h_12",";p^{lead}_{T}(GeV);p^{sub}_{T}(GeV);fake rate"   ,7,15,50,7,15,50)
#
#
# for cut1 in [15,20,25,30,35,40,45]:
#     for cut2 in [15,20,25,30,35,40,45]:
#         if cut1 >= cut2 :
#             cut   = "weight*(" + cuts + "&& dijet_LeadJPt>" + str(cut1) + "&& dijet_SubJPt>" + str(cut2) + ")"
#             cut_01 = "weight*(" + cuts + "&& dijet_LeadJPt>" + str(cut1) + "&& dijet_SubJPt>" + str(cut2) + "&& dijet_jet1_match )"
#             cut_02 = "weight*(" + cuts + "&& dijet_LeadJPt>" + str(cut1) + "&& dijet_SubJPt>" + str(cut2) + "&& dijet_jet2_match )"
#             cut_12 = "weight*(" + cuts + "&& dijet_LeadJPt>" + str(cut1) + "&& dijet_SubJPt>" + str(cut2) + "&& dijet_jet1_match && dijet_jet2_match )"
#
#             stack.get_signal_tree().Project("hist_s(3,0,3)","1", cut )
#             stack.get_background_tree().Project("hist_b(3.0.3)","1", cut )
#
#             stack.get_signal_tree().Project("hist_01(3,0,3)","1", cut_01 )
#             stack.get_signal_tree().Project("hist_02(3,0,3)","1", cut_02 )
#             stack.get_signal_tree().Project("hist_12(3,0,3)","1", cut_12 )
#
#             hist_s = heppi.ROOT.gDirectory.Get( 'hist_s' )
#             hist_s.SetDirectory(0)
#             hist_b = heppi.ROOT.gDirectory.Get( 'hist_b' )
#             hist_b.SetDirectory(0)
#             hist_01 = heppi.ROOT.gDirectory.Get( 'hist_01' )
#             hist_01.SetDirectory(0)
#             hist_02 = heppi.ROOT.gDirectory.Get( 'hist_02' )
#             hist_02.SetDirectory(0)
#             hist_12 = heppi.ROOT.gDirectory.Get( 'hist_12' )
#             hist_12.SetDirectory(0)
#
#             signif = 0
#             s = hist_s.Integral()
#             b = hist_b.Integral()
#
#             s_01 = hist_01.Integral()
#             s_02 = hist_02.Integral()
#             s_12 = hist_12.Integral()
#
#             h_01.Fill(cut1,cut2,s_01/s)
#             h_02.Fill(cut1,cut2,s_02/s)
#             h_12.Fill(cut1,cut2,s_12/s)
#
#             if (s+b) !=0:
#                 signif = s*s / (s + b)
#                 print "[%i,%i] = (%f,%f) = %f" % (cut1,cut2,s,b,signif)
#                 hist.Fill(cut1,cut2,signif)
# c = heppi.ROOT.TCanvas("c","c",500,500)
# c.cd()
# hist.Draw("colz")
# c01 = heppi.ROOT.TCanvas("c01","c",500,500)
# c01.cd()
# h_01.Draw("colz")
# c02 = heppi.ROOT.TCanvas("c02","c",500,500)
# c02.cd()
# h_02.Draw("colz")
# c12 = heppi.ROOT.TCanvas("c12","c",500,500)
# c12.cd()
# h_12.Draw("colz")

# raw_input('...')
