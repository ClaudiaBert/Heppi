#!/usr/bin/env python

from optparse   import OptionParser
from heppi      import heppi
import ROOT
# include the plotting tools from matplotlib
# and the optimisation tools from scipy
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import math
ROOT.gROOT.SetBatch( heppi.ROOT.kTRUE  )


def get_options():
    parser = OptionParser()
    parser.add_option("-r", "--load", dest="plotcard",default='plotcard.json',
                      help="""
                      Load the plot card in json format,
                      please use ./makeplotcard.py to create one
                      """,
                      metavar="FILE")
    parser.add_option("-s", "--sampledir", dest="sampledir",default='./data/',
                      help="""
                      Specify the detrectory where the trees are.
                      example: --filedir /data/trees
                      """)
    parser.add_option("-v", "--variable",
                      dest="variable",default="",
                      help="name of the variable you want to draw")
    parser.add_option('--verbose', dest='verbose', default='INFO',
                     help="Increase verbosity (specify multiple times for more)")
    return parser.parse_args()


func = ROOT.TF1('func','[0]*TMath::Gaus(x,[1],[2])',100,180)
func.SetParameter(0,10.)
func.SetParameter(1,125)
func.SetParameter(2,1.0)

# return a normalised smothed his_mintogram
def get_eff_nsig(stack, bound = [-1,1]):
    _cut_ = '(dipho_dijet_MVA > %1.3f && dipho_dijet_MVA < %1.3f)' % (bound[0], bound[1])
    h_sig = stack.histogram(variable = stack.variables['dipho_mass'],
                            type = 'signal',
                            cut  = _cut_, label= '_%1.3f_%1.3f_' % (bound[0], bound[1]))
    h_sig.Rebin(10)
    h_bkg = stack.histogram(variable = stack.variables['dipho_mass'],
                            type = 'background',
                            cut  = _cut_, label= '_%1.3f_%1.3f_' % (bound[0], bound[1]))
    h_bkg.Smooth(1)
    h_bkg.Rebin(10)

    # h_sig.Fit(func)
    sigma = 1.8#func.GetParameter(2)
    sigma = abs(sigma)
    h_sig.GetXaxis().SetRangeUser(125-(3*sigma),125+(3*sigma))
    h_bkg.GetXaxis().SetRangeUser(125-(3*sigma),125+(3*sigma))

    ns = h_sig.Integral()
    nb = h_bkg.Integral()
    print 'bound :: ', bound
    print '[s,b] :: [', ns,',', nb,'] in range[',125-(3*sigma),',',125+(3*sigma),']'

    return (ns*ns / nb) if nb!=0 else 0


def model(stack, bound = [0.6,0.8]):
    bound.append(1)
    z = 0
    for ibin in range(len(bound)-1):
        range_ = [bound[ibin], bound[ibin+1]]
        z += get_eff_nsig(stack, range_)

    return z

if __name__ == "__main__":

    (opt, args) = get_options()
    stack = heppi.instack(
         plotcard  = opt.plotcard,
         sampledir = opt.sampledir
    )
    stack.read_plotcard()
    stack.book_trees   ()
    stack.print_cuts   ()


    hist2D = ROOT.TH2F('hist2D','',50,0,1,50,0,1)
    delta = 0.02
    x = y = np.arange(0, 1, delta)
    for ix in range(x.size) :
        for iy in range(y.size) :
            z = model(stack,[x[ix],y[iy]])
            hist2D.SetBinContent(ix,iy,z)

    c =  ROOT.TCanvas('c','',500,500);
    c.cd(1)
    hist2D.Draw('colz')

    c.cd()
    c.SaveAs('optimisation.pdf')

    raw_input()
