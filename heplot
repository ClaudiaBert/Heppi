#!/usr/bin/python

import hepplotlib as hp

import os, sys, glob, sys, json
import logging
import colors

from optparse import OptionParser

def read_plotcard(plotcard):
    config = json.loads(open(plotcard).read())
    for key in config:
        if 'variables' in key:
            logging.debug(' ---- book variables ----')
            for var in config[key]:
                logging.debug(' -- %17s  %12s ' % ( var ,config[key][var]['hist']))
                hp.options.variables[var] = config[key][var]
        if 'processes' in key:
            logging.debug(' ---- book processes ----')
            for proc in config[key]:
                logging.debug(' -- %17s  %12s ' % (proc,  config[key][proc]))
                hp.options.samples[proc] = config[key][proc]
                
        if 'selections' in key:
            logging.debug(' ---- book selections ---')
            for sel in config[key]:
                print
                logging.debug(' -- %17s  %12s ' % (sel , config[key][sel]))
                hp.options.selections[sel] = config[key][sel]
            logging.debug(' -------------------')
            
def get_options():
    parser = OptionParser()
    parser.add_option("-r", "--load", dest="plotcard",default='plotcard.json',
                      help="""
                      Load the plot card in json format, 
                      please use ./makeplotcard.py to create one
                      """,
                      metavar="FILE")
    parser.add_option("-t", "--tree", dest="treename",default='VBFMVADumper/*VBFDiJet',
                      help="dumper tree that you want to use", metavar="FILE")
    parser.add_option("-a", "--all", 
                      action="store_true", dest="draw_all", default=False,
                      help="draw all the variables specified in the plotcard")
    parser.add_option("-d", "--display", 
                      action="store_true", dest="display", default=False,
                      help="draw all the variables specified in the plotcard")
    parser.add_option("-v", "--variable",
                      dest="variable",default="dijet_leadPt",
                      help="name of the variable you want to draw")
    parser.add_option("-n", "--allnorm",
                      action="store_true",dest="allnormhist",default=False,
                      help="all the histogram will be normilised")
    parser.add_option("-l", "--alllog",
                      action="store_true",dest="allloghist",default=False,
                      help="all the histogram will be in log scale")
    return parser.parse_args()

if __name__ == "__main__":
    (opt, args) = get_options()
    hp.options.args        = opt
    hp.options.allnormhist = options.allnormhist
    ROOT.gROOT.ProcessLine(".x ~/.rootsys/rootlogon.C")
    read_plotcard(options.plotcard)
    
